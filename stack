#!/bin/bash

DEFAULT_PATH=~/.stackfiles/stack

STACK_ROOT=~/.stackfiles
STACK_FILE=stack
STACK_FULLPATH=$STACK_ROOT/$STACK_FILE

while true; do
    case $1 in
        -h|--help)
            echo
            echo "Usage: stack <text> | stack <option>"
            echo
            echo "Quickly add a new line to"
            echo
            echo "  $STACK_FULLPATH,"
            echo
            echo "for To-Do-list-like purposes."
            echo
            echo "You should get an error if there is no"
            echo "\"Documents\" folder in your \$HOME directory,"
            echo "or I might mess things up in the unlikely"
            echo "event that you already have a file under that"
            echo "name and location wot assigned some other"
            echo "purpose!"
            echo
            echo "Available options:"
            echo
            column -s "%" -o "    " -t <<HERE
        -c%Clear your stackfile. (Requires confirmation.)
    %
        -f [NODE]... FILE :%Enter this option *first*.
    %
        %The file used by default is $STACK_FULLPATH,
        %but you can specify any other file in $( basename $STACK_ROOT )'s
        %subdirectory structure by passing its name and path
        %to the -f option.
        %The idea is to provide Workflowy-like nesting.
    %
        %The "nodes" correspond to the actual directory
        %structure inside the $( basename $STACK_ROOT ) directory, but
        %the syntax here replaces "+"s and "/"s with whitespace.
        %(The "+"s are added automatically and you're supposed to
        %ignore them.)
        %E.g.
        %
        %    stack -f next errands shopping_centre : "La la la"        
        %
        %writes "La la la" to the file
        %
        %    $STACK_ROOT/next+/+errands+/+shopping_centre
        %
        %NOTE: Aliases are your friends. If you often use a
        %number of different stackfiles, e.g. a "next" file
        %file, a "waiting_for" file, a "calendar" file, you
        %might like to add "alias next='stack -f next'" and
        %company to your .bashrc. (Without the colon, so that
        %you can append further nodes.)
    %
        -h|--help%Print this text and exit.
    %
        -l%Print the contents of your stackfile.
    %
        -s%Print the contents of your stackfile with line
        %numbers, then prompt you for arguments to pass
        %to sed. The resulting sed command is then
        %applied to your stackfile, which is then
        %overwritten by the output! Consult "man sed"
        %and the web to learn about sed. Most
        %importantly perhaps, entering "stack -s" and
        %then "4d" will delete the fourth line in the stack.
         %(Can you guess how to delete the third line?).
    %
        -t%Print the contents of your stackfile from newest
        %to oldest.
HERE
            echo
            echo "Absent any of these options at first position,"
            echo "any text you write after \"stack \" will be "
            echo "appended to your stackfile."
            echo
            exit 0
            ;;
        -c)
            PROMPT="Clear $STACK_FILE? [y/n] "
            while true; do
                read -p "$PROMPT" -n 1 ANSWER
                echo
                if [ "$ANSWER" = "y" ]; then
                    rm $STACK_FULLPATH
                    touch $STACK_FULLPATH
                    echo "All clear."
                    break
                elif [ "$ANSWER" = "n" ]; then
                    echo "$STACK_FILE left untouched."
                    break
                else
                    PROMPT="Clear $STACK_FILE? --> [y/n] <-- "
                fi
            done
            exit 0
            ;;
        -f)
            STACK_PATH=
            while true; do
                shift
                if [ -z "$1" ]; then
                    echo "Error: Missing colon."
                    echo "Proper syntax is \"stack -f FOLDER... FILE : [TEXT]...\""
                    exit 1
                elif [ "$1" = ':' ]; then
                    break
                else
                    if [ -z "$STACK_PATH" ]; then
                        STACK_PATH="$1"
                    else
                        STACK_PATH="$STACK_PATH+/+$1"
                    fi
                fi
            done
            shift
            STACK_DIR=$( dirname $STACK_PATH )
            STACK_FILE=$( basename $STACK_PATH )
            STACK_FULLPATH=$STACK_ROOT/$STACK_DIR/$STACK_FILE

            # This is permissive. I could first check $3 to see if the user is actually trying
            # to create a new file before I create new directories.

            if [ ! -d $STACK_ROOT/$STACK_DIR ]; then
                mkdir -p $STACK_ROOT/$STACK_DIR
                echo "Created $STACK_ROOT/$STACK_DIR"
            fi
            ;;
        -l)
            cat -n $STACK_FULLPATH
            exit 0
            ;;
        -ls)
            if [ "$STACK_FULLPATH" = "$DEFAULT_PATH" ]; then
                NODE_PATH="$STACK_ROOT"
            else
                NODE_PATH="$STACK_FULLPATH"
            fi
            for i in $( ls $NODE_PATH ); do
                echo
                echo $i
                if [ -f $i ]; then
                    echo
                    cat -n $i
                fi
            done
            exit 0
            ;; 
        --pleh)
            echo "\"--pleh\" is \"--help\" written backwards so that helicopters can read it from the sky.:wq"
            exit 0
            ;;
        -s)
            cat -n $STACK_FULLPATH
            read -p "sed " COMMANDS
            echo "$( sed "$COMMANDS" $STACK_FULLPATH )" > $STACK_FULLPATH
            exit 0
            ;;     
        -t)
            tac $STACK_FULLPATH
            exit 0
            ;;
        *)
            echo -e $@ >> $STACK_FULLPATH
            echo "Stacked."
            exit 0
            ;;
    esac
done
