#!/bin/bash

# Quickly take, organise, and edit notes from the command line.

shopt -s globstar

STACK_ROOT=~/.stackfiles
EDITOR=vim
# TODO: There should be a PAGER constant here. However, I want to set it to
#       "vimpager -c \"set nonumber\"", and I have not yet found a way to
#       pipe output to this constant without triggering a confusing error.
#       (No problems if PAGER is set to something simpler like just "vimpager"
#       or "less").

err() {
    echo "$( basename $0 ): $@" >&2
}

usage() {
#   TODO
    echo "Usage info coming soon."

}

list_dirs() {

    for i in "$@"; do
        if [ -d $i ]; then
            echo "$indent $( echo $i | cut -b $(( ${#STACK_ROOT} + 2 ))- )"
            list_dirs $i/*
        fi
    done 

}

print_all() {

    for i in "$@"; do
        if [ -f $i ]; then
            cat -n $i
            echo
        fi
    done

    for i in "$@"; do
        if [ -d $i ]; then
            echo "$( echo $i | cut -b $(( ${#STACK_ROOT} + 2 ))- )"
            echo
            print_all $i/*
        fi
    done 

}

list_files() {

    local stack_dir="$1"

    local sub_dir_contents
    sub_dir_contents=("$stack_dir/**")

    local files
    files=""

    for i in $stack_dir/*; do
        if [ -f $i ]; then
            files="$files $i"
        fi
    done

    for i in $sub_dir_contents; do
        if [ -f "$i" ]; then
            files="$files $i"
        fi
    done

    echo "$files"

}

clear_stack_file() {

    local stack_full_path
    stack_full_path="$1"

    local stack_file
    stack_file="$( basename $stack_full_path )"

    local prompt
    prompt="Clear $stack_file? [y/n] "
    
    while true; do
        read -p "$prompt" -n 1 answer
        echo
        if [ "$answer" = "y" ]; then
            echo -n > $stack_full_path
            echo "All clear."
            break
        elif [ "$answer" = "n" ]; then
            echo "$stack_file Left untouched."
            break
        else
            prompt="Clear $stack_file? --> [y/n] <-- "
        fi
    done

}

remove_node() {

    local stack_dir="$1"

    echo "Up for deletion:"
    echo
    echo $stack_dir/** | sed 's/\ /\n/g'
    echo

    local prompt
    prompt="Confirm? [y/n] "

    local answer

    while true; do
        read -p "$prompt" -n 1 answer
        echo
        if [ "$answer" = "y" ]; then
            rm -rf $stack_dir
            echo "Deleted."
            break
        elif [ "$answer" = "n" ]; then
            echo "Nothing deleted."
            break
        else
            prompt="Confirm? --> [y/n] <-- "
        fi
    done

}

remove_last_line() {

    local stack_full_path="$1"

    local new_file_content
    new_file_content="$( head -n -1 $stack_full_path )"

    if [ -z "$new_file_content" ]; then
        echo -n > $stack_full_path
    else
        echo "$new_file_content" > $stack_full_path
    fi

    echo "Deleted last line."

}

sed_edit() {

    local stack_full_path="$1"

    echo
    cat -n $stack_full_path | sed 's/   //g;s/\t/  /g'
    echo

    local commands
    read -p "sed " commands

    local full_command
    full_command="sed $commands $stack_full_path"

    echo
    echo "Command: $full_command"

    if ! $full_command > /dev/null; then
        echo
        echo "Faulty sed command. Aborting."
        return 1
    fi

    while true; do
        local answer
        echo
        printf "\tc) Cancel.\n"
        printf "\tv) View result without saving, then return to this prompt.\n"
        printf "\tw) Overwrite the file with the result of this command.\n"
        echo
        read -p "[c/v/w]? " -n 1 answer
        echo
        case $answer in
            c)
                echo
                echo "Cancelled."
                break
                ;;
            v)
                echo
                $full_command | cat -n
                ;;
            w)
                echo "$( $full_command )" > $stack_full_path
                echo
                echo "Overwritten."
                break
                ;;
            *)
                echo
                echo "Invalid selection."
                ;;
        esac
    done

}

main() {

    local stack_dir
    stack_dir="$STACK_ROOT"

    local stack_file
    stack_file="stack"

    if [ "$1" = "-f" ]; then

        stack_file=""
        while true; do
            shift
            if [[ "$1" =~ ^- ]] || [ "$1" = ":" ] || [ -z "$1" ]; then
                break
            else
               stack_dir="${stack_dir}/$1"
            fi
        done

        stack_file=$( basename $stack_dir )

        if [ "$1" = ":" ]; then
            if [ ! -d $stack_dir ]; then
                mkdir -p $stack_dir
                echo "Created ${stack_dir}."
            fi
            shift
        fi 

    fi

    local stack_fullpath
    stack_full_path="${stack_dir}/${stack_file}"

    if [ "$#" -eq 0 ]; then
        echo
        cat -n $stack_full_path | sed 's/   //g;s/\t/  /g'
        echo
        list_dirs ${stack_dir}/*
        exit 0
    fi

    if [ "$1" = "--help" ]; then
        usage
        exit 0
    fi

    getopts :cdeEhlmrstu opt

    case $opt in
        c) clear_stack_file $stack_full_path ;;
        d) list_dirs ${stack_dir}/* ;;
        e) $EDITOR $stack_full_path ;;
        E) $EDITOR $( list_files $stack_dir ) ;;
        h) usage ;;
        l) print_all "$stack_dir" | vimpager -c "set nonumber" ;;
        m)
            echo "Type text and hit Enter to stack it, rince and repeat. Ctrl+D to quit."
            cat >> $stack_full_path ;;
        r) remove_node $stack_dir ;;
        s) sed_edit $stack_full_path ;;
        t) tac $stack_full_path | cat -n ;;
        u) remove_last_line $stack_full_path ;;
        *)
            echo "$@" >> $stack_full_path
            echo "Stacked."
            ;;
    esac

    exit 0

}

main "$@"
