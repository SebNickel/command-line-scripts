#!/bin/bash

if [ $# = 0 ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo
    echo "Usage: wiki <search terms>"
    echo
    echo "If your search terms are matched to a Wikipedia"
    echo "article by Wikipedia's search engine, the first"
    echo "two paragraphs of this article will be written"
    echo "to stdout."
    echo
    echo "If your search terms land you on a disambiguation"
    echo "page, the entire list of possible meanings will"
    echo "be printed. This may be more output than you"
    echo "expect."
    echo
    echo "Wikipedia resolves ambiguities by adding a context"
    echo "term in parentheses, e.g. \"Blur (band)\" and"
    echo "\"Blur (comics)\" to distinguish between meanings"
    echo "of \"Blur\". You can use this pattern in your"
    echo "search terms provided that you escape the brackets,"
    echo "e.g."
    echo "      wiki Blur \"(band)\""
    echo "or    wiki Blur \\(band\\)"
    echo "It might be worth making this more convenient..."
    echo
    echo "If the moarwiki script is also installed, you can"
    echo "then enter \"moar!!\" to view the whole page."
    echo
    echo "Nontrivial dependencies: curl, w3m, xmlstarlet"
    echo

    if [ $# = 0 ]; then exit 1; fi
    
    exit 0
fi

QUERY=$( IFS=+; echo "$*" )

LOCATIONLINE=($( curl -vsS https://en.wikipedia.org/w/index.php?search=$QUERY 2>&1 | grep "< Location:" | tr -d '\r' ))

if [ -z $LOCATIONLINE ]; then
    echo No results.
    exit 1
fi

URL="${LOCATIONLINE[2]}"

CONTENTDIV=$( curl -sS "$URL" | xmlstarlet sel -t -c "//div[@id='mw-content-text']" )

FIRSTPARAGRAPHS=$( echo $CONTENTDIV | xmlstarlet sel -t -c "/div/p[node()][position() < 3]" )

if [[ $FIRSTPARAGRAPHS = *"may refer to:</p>" ]] || [[ $FIRSTPARAGRAPHS = *"may also refer to:</p>" ]]; then
    LIST=$( echo $CONTENTDIV | xmlstarlet sel -t -c "//*[@id!='toctitle']/h2|//*[@id!='toc']/ul" )
    OUTPUT="$FIRSTPARAGRAPHS $LIST"
else
    OUTPUT=$FIRSTPARAGRAPHS
fi

echo
echo $OUTPUT | w3m -T text/html | cat
